=begin
#Segnivo Developer API

#**API Version**: 1.7  **Date**: 9th July, 2024  ## ðŸ“„ Getting Started  This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.  Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.  The API must not be abused and should be used within acceptable limits.  To start using this API, you will need not create or access an existing Segnivo account to obtain your API key ([retrievable from your account settings](https://messaging.segnivo.com/account/api)).  - You must use a valid API Key to send requests to the API endpoints.      - The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.      - The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key or with details in the message key.       ### ðŸ”– **Need some help?**  In case you have questions or need clarity with interacting with some endpoints feel free to create a support ticket on your account or you can send an email ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)) directly and we would be happy to help.  ---  ## Authentication  As noted earlier, this API uses API keys for authentication. You can generate a Segnivo API key in the [API](https://messaging.segnivo.com/account/api) section of your account settings.  You must include an API key in each request to this API with the `X-API-KEY` request header.  ### Authentication error response  If an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.  ## Rate and usage limits  API access rate limits apply on a per-API endpoint basis in unit time. The limit is 10k requests per hour for most endpoints and 1m requests per hour for transactional/relay email-sending endpoints. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code or HTTP 403 if sending credits have been exhausted.  ### 503 response  An HTTP `503` response from our servers may indicate there is an unexpected spike in API access traffic, while this rarely happens, we ensure the server is usually operational within the next two to five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, contact support ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)).  ### Request headers  To make a successful request, some or all of the following headers must be passed with the request.  | **Header** | **Description** | | --- | --- | | Content-Type | Required and should be `application/json` in most cases. | | Accept | Required and should be `application/json` in most cases | | Content-Length | Required for `POST`, `PATCH`, and `PUT` requests containing a request body. The value must be the number of bytes rather than the number of characters in the request body. | | X-API-KEY | Required. Specifies the API key used for authorization. |  ##### ðŸ”– Note with example requests and code snippets  If/when you use the code snippets used as example requests, remember to calculate and add the `Content-Length` header. Some request libraries, frameworks, and tools automatically add this header for you while a few do not. Kindly check and ensure yours does or add it yourself.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'spec_helper'
require 'json'

# Unit tests for SegnivoSDK::SubscribersContactsApi
# Automatically generated by openapi-generator (https://openapi-generator.tech)
# Please update as you see appropriate
describe 'SubscribersContactsApi' do
  before do
    # run before each test
    @api_instance = SegnivoSDK::SubscribersContactsApi.new
  end

  after do
    # run after each test
  end

  describe 'test an instance of SubscribersContactsApi' do
    it 'should create an instance of SubscribersContactsApi' do
      expect(@api_instance).to be_instance_of(SegnivoSDK::SubscribersContactsApi)
    end
  end

  # unit tests for contacts_get
  # Get contacts
  # Returns a list of contacts/subscribers on your account  This endpoint accepts three **optional** query parameters  - &#x60;email&#x60; â€” An email address to search for. If set, the endpoint only returns subscribers that have an identical email address.      - &#x60;per_page&#x60; â€” A limit on the number of records to return.      - &#x60;page&#x60; â€” The parameter serves as an offset on the number of records returned.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :email An email address to search for.
  # @option opts [Integer] :per_page How many items should be returned ahead.
  # @option opts [Integer] :page The offset for the items to be returned, helps in pagination.
  # @return [Object]
  describe 'contacts_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_post
  # Add a Contact
  # Add a new contact/subscriber to your mailing list
  # @param [Hash] opts the optional parameters
  # @option opts [AddContactRequest] :add_contact_request 
  # @return [Object]
  describe 'contacts_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_uid_add_tag_post
  # Add tags to a contact
  # Add tags to an existing contact
  # @param uid (Required) The uid of the contact to update with the tags.
  # @param [Hash] opts the optional parameters
  # @option opts [ContactsUidAddTagPostRequest] :contacts_uid_add_tag_post_request 
  # @return [Object]
  describe 'contacts_uid_add_tag_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_uid_delete_post
  # Delete a contact
  # Delete an existing contact
  # @param uid (Required) The uid of the contact to delete.
  # @param [Hash] opts the optional parameters
  # @option opts [Object] :body 
  # @return [Object]
  describe 'contacts_uid_delete_post test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_uid_get
  # Get a contact
  # Fetch detailed contact information for specified a contact
  # @param uid (Required) The uid of the contact to get.
  # @param [Hash] opts the optional parameters
  # @return [Object]
  describe 'contacts_uid_get test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_uid_patch
  # Update Contact
  # Update the specified subscriber/contact
  # @param uid (Required) The uid of the contact to update.
  # @param [Hash] opts the optional parameters
  # @option opts [ContactUpdateRequest] :contact_update_request 
  # @return [Object]
  describe 'contacts_uid_patch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_uid_subscribe_patch
  # Subscribe a contact
  # Subscribe a contact to a list
  # @param uid (Required) The uid of the contact to subscribe.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :list_uid (Required) The uid of the mail list to subscribe the contact.
  # @option opts [Object] :body 
  # @return [Object]
  describe 'contacts_uid_subscribe_patch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

  # unit tests for contacts_uid_unsubscribe_patch
  # Unsubscribe a contact
  # Unsubscribe a contact from a list
  # @param uid (Required) The uid of the contact to unsubscribe.
  # @param [Hash] opts the optional parameters
  # @option opts [String] :list_uid (Required) The uid of the mail list to unsubscribe the contact.
  # @option opts [Object] :body 
  # @return [Object]
  describe 'contacts_uid_unsubscribe_patch test' do
    it 'should work' do
      # assertion here. ref: https://rspec.info/features/3-12/rspec-expectations/built-in-matchers/
    end
  end

end
