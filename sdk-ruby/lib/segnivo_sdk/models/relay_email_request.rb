=begin
#Segnivo Developer API

#**API Version**: 1.7  **Date**: 9th July, 2024  ## ðŸ“„ Getting Started  This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.  Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.  The API must not be abused and should be used within acceptable limits.  To start using this API, you will need not create or access an existing Segnivo account to obtain your API key ([retrievable from your account settings](https://messaging.segnivo.com/account/api)).  - You must use a valid API Key to send requests to the API endpoints.      - The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.      - The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key or with details in the message key.       ### ðŸ”– **Need some help?**  In case you have questions or need clarity with interacting with some endpoints feel free to create a support ticket on your account or you can send an email ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)) directly and we would be happy to help.  ---  ## Authentication  As noted earlier, this API uses API keys for authentication. You can generate a Segnivo API key in the [API](https://messaging.segnivo.com/account/api) section of your account settings.  You must include an API key in each request to this API with the `X-API-KEY` request header.  ### Authentication error response  If an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.  ## Rate and usage limits  API access rate limits apply on a per-API endpoint basis in unit time. The limit is 10k requests per hour for most endpoints and 1m requests per hour for transactional/relay email-sending endpoints. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code or HTTP 403 if sending credits have been exhausted.  ### 503 response  An HTTP `503` response from our servers may indicate there is an unexpected spike in API access traffic, while this rarely happens, we ensure the server is usually operational within the next two to five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, contact support ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)).  ### Request headers  To make a successful request, some or all of the following headers must be passed with the request.  | **Header** | **Description** | | --- | --- | | Content-Type | Required and should be `application/json` in most cases. | | Accept | Required and should be `application/json` in most cases | | Content-Length | Required for `POST`, `PATCH`, and `PUT` requests containing a request body. The value must be the number of bytes rather than the number of characters in the request body. | | X-API-KEY | Required. Specifies the API key used for authorization. |  ##### ðŸ”– Note with example requests and code snippets  If/when you use the code snippets used as example requests, remember to calculate and add the `Content-Length` header. Some request libraries, frameworks, and tools automatically add this header for you while a few do not. Kindly check and ensure yours does or add it yourself.

The version of the OpenAPI document: 1.0.0

Generated by: https://openapi-generator.tech
Generator version: 7.10.0

=end

require 'date'
require 'time'

module SegnivoSDK
  class RelayEmailRequest
    # The subject of the email
    attr_accessor :subject

    # The full name of the sender
    attr_accessor :from_name

    # The email of the sender
    attr_accessor :from_email

    # The email to which replies should be sent
    attr_accessor :reply_to

    # The content type of the email body
    attr_accessor :content_type

    # An array of email addresses to deliver this message
    attr_accessor :recipients

    # The HTML or plain text content of the email
    attr_accessor :content

    # The email preheader
    attr_accessor :preheader

    # An object of custom headers to add to the email
    attr_accessor :custom_headers

    # The 10-digit unix timestamp of the date/time at which this email should be delivered
    attr_accessor :delivery_at

    # An array of URLs of files to attach to the email
    attr_accessor :attachments

    # A boolean value on if a DKIM signature should be included in this message
    attr_accessor :sign_dkim

    # A boolean value on if email clicks should be tracked
    attr_accessor :track_click

    # A boolean value on if the email opens should be tracked
    attr_accessor :track_open

    # A boolean value to flag this email as a transactional email
    attr_accessor :is_transactional

    class EnumAttributeValidator
      attr_reader :datatype
      attr_reader :allowable_values

      def initialize(datatype, allowable_values)
        @allowable_values = allowable_values.map do |value|
          case datatype.to_s
          when /Integer/i
            value.to_i
          when /Float/i
            value.to_f
          else
            value
          end
        end
      end

      def valid?(value)
        !value || allowable_values.include?(value)
      end
    end

    # Attribute mapping from ruby-style variable name to JSON key.
    def self.attribute_map
      {
        :'subject' => :'subject',
        :'from_name' => :'from_name',
        :'from_email' => :'from_email',
        :'reply_to' => :'reply_to',
        :'content_type' => :'content_type',
        :'recipients' => :'recipients',
        :'content' => :'content',
        :'preheader' => :'preheader',
        :'custom_headers' => :'custom_headers',
        :'delivery_at' => :'delivery_at',
        :'attachments' => :'attachments',
        :'sign_dkim' => :'sign_dkim',
        :'track_click' => :'track_click',
        :'track_open' => :'track_open',
        :'is_transactional' => :'is_transactional'
      }
    end

    # Returns all the JSON keys this model knows about
    def self.acceptable_attributes
      attribute_map.values
    end

    # Attribute type mapping.
    def self.openapi_types
      {
        :'subject' => :'String',
        :'from_name' => :'String',
        :'from_email' => :'String',
        :'reply_to' => :'String',
        :'content_type' => :'String',
        :'recipients' => :'Array<String>',
        :'content' => :'String',
        :'preheader' => :'String',
        :'custom_headers' => :'Object',
        :'delivery_at' => :'Integer',
        :'attachments' => :'Array<String>',
        :'sign_dkim' => :'Boolean',
        :'track_click' => :'Boolean',
        :'track_open' => :'Boolean',
        :'is_transactional' => :'Boolean'
      }
    end

    # List of attributes with nullable: true
    def self.openapi_nullable
      Set.new([
      ])
    end

    # Initializes the object
    # @param [Hash] attributes Model attributes in the form of hash
    def initialize(attributes = {})
      if (!attributes.is_a?(Hash))
        fail ArgumentError, "The input argument (attributes) must be a hash in `SegnivoSDK::RelayEmailRequest` initialize method"
      end

      # check to see if the attribute exists and convert string to symbol for hash key
      attributes = attributes.each_with_object({}) { |(k, v), h|
        if (!self.class.attribute_map.key?(k.to_sym))
          fail ArgumentError, "`#{k}` is not a valid attribute in `SegnivoSDK::RelayEmailRequest`. Please check the name to make sure it's valid. List of attributes: " + self.class.attribute_map.keys.inspect
        end
        h[k.to_sym] = v
      }

      if attributes.key?(:'subject')
        self.subject = attributes[:'subject']
      end

      if attributes.key?(:'from_name')
        self.from_name = attributes[:'from_name']
      end

      if attributes.key?(:'from_email')
        self.from_email = attributes[:'from_email']
      end

      if attributes.key?(:'reply_to')
        self.reply_to = attributes[:'reply_to']
      end

      if attributes.key?(:'content_type')
        self.content_type = attributes[:'content_type']
      else
        self.content_type = 'html'
      end

      if attributes.key?(:'recipients')
        if (value = attributes[:'recipients']).is_a?(Array)
          self.recipients = value
        end
      end

      if attributes.key?(:'content')
        self.content = attributes[:'content']
      end

      if attributes.key?(:'preheader')
        self.preheader = attributes[:'preheader']
      end

      if attributes.key?(:'custom_headers')
        self.custom_headers = attributes[:'custom_headers']
      end

      if attributes.key?(:'delivery_at')
        self.delivery_at = attributes[:'delivery_at']
      end

      if attributes.key?(:'attachments')
        if (value = attributes[:'attachments']).is_a?(Array)
          self.attachments = value
        end
      end

      if attributes.key?(:'sign_dkim')
        self.sign_dkim = attributes[:'sign_dkim']
      else
        self.sign_dkim = true
      end

      if attributes.key?(:'track_click')
        self.track_click = attributes[:'track_click']
      else
        self.track_click = true
      end

      if attributes.key?(:'track_open')
        self.track_open = attributes[:'track_open']
      else
        self.track_open = true
      end

      if attributes.key?(:'is_transactional')
        self.is_transactional = attributes[:'is_transactional']
      else
        self.is_transactional = false
      end
    end

    # Show invalid properties with the reasons. Usually used together with valid?
    # @return Array for valid properties with the reasons
    def list_invalid_properties
      warn '[DEPRECATED] the `list_invalid_properties` method is obsolete'
      invalid_properties = Array.new
      if !@recipients.nil? && @recipients.length > 50
        invalid_properties.push('invalid value for "recipients", number of items must be less than or equal to 50.')
      end

      invalid_properties
    end

    # Check to see if the all the properties in the model are valid
    # @return true if the model is valid
    def valid?
      warn '[DEPRECATED] the `valid?` method is obsolete'
      content_type_validator = EnumAttributeValidator.new('String', ["text", "html"])
      return false unless content_type_validator.valid?(@content_type)
      return false if !@recipients.nil? && @recipients.length > 50
      true
    end

    # Custom attribute writer method checking allowed values (enum).
    # @param [Object] content_type Object to be assigned
    def content_type=(content_type)
      validator = EnumAttributeValidator.new('String', ["text", "html"])
      unless validator.valid?(content_type)
        fail ArgumentError, "invalid value for \"content_type\", must be one of #{validator.allowable_values}."
      end
      @content_type = content_type
    end

    # Custom attribute writer method with validation
    # @param [Object] recipients Value to be assigned
    def recipients=(recipients)
      if recipients.nil?
        fail ArgumentError, 'recipients cannot be nil'
      end

      if recipients.length > 50
        fail ArgumentError, 'invalid value for "recipients", number of items must be less than or equal to 50.'
      end

      @recipients = recipients
    end

    # Checks equality by comparing each attribute.
    # @param [Object] Object to be compared
    def ==(o)
      return true if self.equal?(o)
      self.class == o.class &&
          subject == o.subject &&
          from_name == o.from_name &&
          from_email == o.from_email &&
          reply_to == o.reply_to &&
          content_type == o.content_type &&
          recipients == o.recipients &&
          content == o.content &&
          preheader == o.preheader &&
          custom_headers == o.custom_headers &&
          delivery_at == o.delivery_at &&
          attachments == o.attachments &&
          sign_dkim == o.sign_dkim &&
          track_click == o.track_click &&
          track_open == o.track_open &&
          is_transactional == o.is_transactional
    end

    # @see the `==` method
    # @param [Object] Object to be compared
    def eql?(o)
      self == o
    end

    # Calculates hash code according to all attributes.
    # @return [Integer] Hash code
    def hash
      [subject, from_name, from_email, reply_to, content_type, recipients, content, preheader, custom_headers, delivery_at, attachments, sign_dkim, track_click, track_open, is_transactional].hash
    end

    # Builds the object from hash
    # @param [Hash] attributes Model attributes in the form of hash
    # @return [Object] Returns the model itself
    def self.build_from_hash(attributes)
      return nil unless attributes.is_a?(Hash)
      attributes = attributes.transform_keys(&:to_sym)
      transformed_hash = {}
      openapi_types.each_pair do |key, type|
        if attributes.key?(attribute_map[key]) && attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = nil
        elsif type =~ /\AArray<(.*)>/i
          # check to ensure the input is an array given that the attribute
          # is documented as an array but the input is not
          if attributes[attribute_map[key]].is_a?(Array)
            transformed_hash["#{key}"] = attributes[attribute_map[key]].map { |v| _deserialize($1, v) }
          end
        elsif !attributes[attribute_map[key]].nil?
          transformed_hash["#{key}"] = _deserialize(type, attributes[attribute_map[key]])
        end
      end
      new(transformed_hash)
    end

    # Deserializes the data based on type
    # @param string type Data type
    # @param string value Value to be deserialized
    # @return [Object] Deserialized data
    def self._deserialize(type, value)
      case type.to_sym
      when :Time
        Time.parse(value)
      when :Date
        Date.parse(value)
      when :String
        value.to_s
      when :Integer
        value.to_i
      when :Float
        value.to_f
      when :Boolean
        if value.to_s =~ /\A(true|t|yes|y|1)\z/i
          true
        else
          false
        end
      when :Object
        # generic object (usually a Hash), return directly
        value
      when /\AArray<(?<inner_type>.+)>\z/
        inner_type = Regexp.last_match[:inner_type]
        value.map { |v| _deserialize(inner_type, v) }
      when /\AHash<(?<k_type>.+?), (?<v_type>.+)>\z/
        k_type = Regexp.last_match[:k_type]
        v_type = Regexp.last_match[:v_type]
        {}.tap do |hash|
          value.each do |k, v|
            hash[_deserialize(k_type, k)] = _deserialize(v_type, v)
          end
        end
      else # model
        # models (e.g. Pet) or oneOf
        klass = SegnivoSDK.const_get(type)
        klass.respond_to?(:openapi_any_of) || klass.respond_to?(:openapi_one_of) ? klass.build(value) : klass.build_from_hash(value)
      end
    end

    # Returns the string representation of the object
    # @return [String] String presentation of the object
    def to_s
      to_hash.to_s
    end

    # to_body is an alias to to_hash (backward compatibility)
    # @return [Hash] Returns the object in the form of hash
    def to_body
      to_hash
    end

    # Returns the object in the form of hash
    # @return [Hash] Returns the object in the form of hash
    def to_hash
      hash = {}
      self.class.attribute_map.each_pair do |attr, param|
        value = self.send(attr)
        if value.nil?
          is_nullable = self.class.openapi_nullable.include?(attr)
          next if !is_nullable || (is_nullable && !instance_variable_defined?(:"@#{attr}"))
        end

        hash[param] = _to_hash(value)
      end
      hash
    end

    # Outputs non-array value in the form of hash
    # For object, use to_hash. Otherwise, just return the value
    # @param [Object] value Any valid value
    # @return [Hash] Returns the value in the form of hash
    def _to_hash(value)
      if value.is_a?(Array)
        value.compact.map { |v| _to_hash(v) }
      elsif value.is_a?(Hash)
        {}.tap do |hash|
          value.each { |k, v| hash[k] = _to_hash(v) }
        end
      elsif value.respond_to? :to_hash
        value.to_hash
      else
        value
      end
    end

  end

end
