/* tslint:disable */
/* eslint-disable */
/**
 * Segnivo Developer API
 * **API Version**: 1.7  **Date**: 9th July, 2024  ## ðŸ“„ Getting Started  This API is based on the REST API architecture, allowing the user to easily manage their data with this resource-based approach.  Every API call is established on which specific request type (GET, POST, PUT, DELETE) will be used.  The API must not be abused and should be used within acceptable limits.  To start using this API, you will need not create or access an existing Segnivo account to obtain your API key ([retrievable from your account settings](https://messaging.segnivo.com/account/api)).  - You must use a valid API Key to send requests to the API endpoints.      - The API only responds to HTTPS-secured communications. Any requests sent via HTTP return an HTTP 301 redirect to the corresponding HTTPS resources.      - The API returns request responses in JSON format. When an API request returns an error, it is sent in the JSON response as an error key or with details in the message key.       ### ðŸ”– **Need some help?**  In case you have questions or need clarity with interacting with some endpoints feel free to create a support ticket on your account or you can send an email ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)) directly and we would be happy to help.  ---  ## Authentication  As noted earlier, this API uses API keys for authentication. You can generate a Segnivo API key in the [API](https://messaging.segnivo.com/account/api) section of your account settings.  You must include an API key in each request to this API with the `X-API-KEY` request header.  ### Authentication error response  If an API key is missing, malformed, or invalid, you will receive an HTTP 401 Unauthorized response code.  ## Rate and usage limits  API access rate limits apply on a per-API endpoint basis in unit time. The limit is 10k requests per hour for most endpoints and 1m requests per hour for transactional/relay email-sending endpoints. Also, depending on your plan, you may have usage limits. If you exceed either limit, your request will return an HTTP 429 Too Many Requests status code or HTTP 403 if sending credits have been exhausted.  ### 503 response  An HTTP `503` response from our servers may indicate there is an unexpected spike in API access traffic, while this rarely happens, we ensure the server is usually operational within the next two to five minutes. If the outage persists or you receive any other form of an HTTP `5XX` error, contact support ([<i>developers@segnivo.com</i>](https://mailto:developers@segnivo.com)).  ### Request headers  To make a successful request, some or all of the following headers must be passed with the request.  | **Header** | **Description** | | --- | --- | | Content-Type | Required and should be `application/json` in most cases. | | Accept | Required and should be `application/json` in most cases | | Content-Length | Required for `POST`, `PATCH`, and `PUT` requests containing a request body. The value must be the number of bytes rather than the number of characters in the request body. | | X-API-KEY | Required. Specifies the API key used for authorization. |  ##### ðŸ”– Note with example requests and code snippets  If/when you use the code snippets used as example requests, remember to calculate and add the `Content-Length` header. Some request libraries, frameworks, and tools automatically add this header for you while a few do not. Kindly check and ensure yours does or add it yourself.
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  CampaignCreateRequest,
  CampaignUpdateRequest,
} from '../models/index';
import {
    CampaignCreateRequestFromJSON,
    CampaignCreateRequestToJSON,
    CampaignUpdateRequestFromJSON,
    CampaignUpdateRequestToJSON,
} from '../models/index';

export interface MessagesPostRequest {
    campaignCreateRequest?: CampaignCreateRequest;
}

export interface MessagesUidDeletePostRequest {
    uid: string;
    body?: object;
}

export interface MessagesUidGetRequest {
    uid: string;
}

export interface MessagesUidPatchRequest {
    uid: string;
    campaignUpdateRequest?: CampaignUpdateRequest;
}

export interface MessagesUidPausePostRequest {
    uid: string;
    body?: object;
}

export interface MessagesUidResumePostRequest {
    uid: string;
    body?: object;
}

/**
 * 
 */
export class EmailCampaignsApi extends runtime.BaseAPI {

    /**
     * Returns a collection of all your campaigns
     * Get campaigns
     */
    async messagesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns a collection of all your campaigns
     * Get campaigns
     */
    async messagesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Creat an email campaign for processing
     * Create a Campaign
     */
    async messagesPostRaw(requestParameters: MessagesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignCreateRequestToJSON(requestParameters['campaignCreateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Creat an email campaign for processing
     * Create a Campaign
     */
    async messagesPost(requestParameters: MessagesPostRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete the specified campaign
     * Delete a campaign
     */
    async messagesUidDeletePostRaw(requestParameters: MessagesUidDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling messagesUidDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages/{uid}/delete`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Delete the specified campaign
     * Delete a campaign
     */
    async messagesUidDeletePost(requestParameters: MessagesUidDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesUidDeletePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Returns the specified campaign details
     * Get a campaign
     */
    async messagesUidGetRaw(requestParameters: MessagesUidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling messagesUidGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Returns the specified campaign details
     * Get a campaign
     */
    async messagesUidGet(requestParameters: MessagesUidGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesUidGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Updates a previously added campaign. Only Active and Paused campaigns can be updated.
     * Update Campaign
     */
    async messagesUidPatchRaw(requestParameters: MessagesUidPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling messagesUidPatch().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages/{uid}`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: CampaignUpdateRequestToJSON(requestParameters['campaignUpdateRequest']),
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Updates a previously added campaign. Only Active and Paused campaigns can be updated.
     * Update Campaign
     */
    async messagesUidPatch(requestParameters: MessagesUidPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesUidPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Pause the specified campaign
     * Pause a campaign
     */
    async messagesUidPausePostRaw(requestParameters: MessagesUidPausePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling messagesUidPausePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages/{uid}/pause`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Pause the specified campaign
     * Pause a campaign
     */
    async messagesUidPausePost(requestParameters: MessagesUidPausePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesUidPausePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Resume delivery of the specified campaign
     * Resume the delivery of a campaign
     */
    async messagesUidResumePostRaw(requestParameters: MessagesUidResumePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<object>> {
        if (requestParameters['uid'] == null) {
            throw new runtime.RequiredError(
                'uid',
                'Required parameter "uid" was null or undefined when calling messagesUidResumePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["X-API-KEY"] = await this.configuration.apiKey("X-API-KEY"); // apiKeyAuth authentication
        }

        const response = await this.request({
            path: `/messages/{uid}/resume`.replace(`{${"uid"}}`, encodeURIComponent(String(requestParameters['uid']))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['body'] as any,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Resume delivery of the specified campaign
     * Resume the delivery of a campaign
     */
    async messagesUidResumePost(requestParameters: MessagesUidResumePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<object> {
        const response = await this.messagesUidResumePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
